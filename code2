import os
import numpy as np
import cv2
import json
import matplotlib.pyplot as plt
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
from tensorflow.keras.models import Model
from tensorflow.keras.layers import GlobalAveragePooling2D, Dense, Dropout
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.model_selection import train_test_split

# === CONFIGURATION ===
DATASET_PATH = "gesture_dataset"
IMG_SIZE = 96
EPOCHS = 50
BATCH_SIZE = 16

# === LOAD IMAGES ===
data, labels = [], []
class_names = sorted(os.listdir(DATASET_PATH))
class_indices = {name: idx for idx, name in enumerate(class_names)}

for class_name in class_names:
    class_dir = os.path.join(DATASET_PATH, class_name)
    for file in os.listdir(class_dir):
        img_path = os.path.join(class_dir, file)
        img = cv2.imread(img_path)
        if img is not None:
            img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))
            img = preprocess_input(img)
            data.append(img)
            labels.append(class_indices[class_name])

data = np.array(data, dtype="float32")
labels = to_categorical(labels)

# === SPLIT TRAIN/TEST ===
X_train, X_test, y_train, y_test = train_test_split(
    data, labels, test_size=0.2, random_state=42, stratify=labels
)

# === BASE MODEL: MobileNetV2 ===
base_model = MobileNetV2(
    input_shape=(IMG_SIZE, IMG_SIZE, 3),
    include_top=False,
    weights='imagenet'
)
base_model.trainable = False

# === CLASSIFICATION HEAD ===
x = GlobalAveragePooling2D()(base_model.output)
x = Dropout(0.3)(x)
x = Dense(128, activation='relu')(x)
x = Dropout(0.3)(x)
output = Dense(len(class_names), activation='softmax')(x)

model = Model(inputs=base_model.input, outputs=output)
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# === TRAINING ===
early_stop = EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)

history = model.fit(
    X_train, y_train,
    validation_data=(X_test, y_test),
    epochs=EPOCHS,
    batch_size=BATCH_SIZE,
    callbacks=[early_stop],
    verbose=2
)

# === SAVE MODEL AND CLASS LABELS ===
model.save("gesture_model_transfer.h5")
with open("class_name.json", "w", encoding="utf-8") as f:
    json.dump(class_indices, f, ensure_ascii=False)
