import tensorflow as tf
from tensorflow .keras. preprocessing .image import ImageDataGenerator
from tensorflow .keras import layers , models , callbacks

# === Configuration ===
data_dir = " gesture_dataset "
img_size = (96, 96)
batch_size = 16
epochs = 50

# === Prétraitement et génération des données ===
datagen = ImageDataGenerator ( validation_split =0.2 , rescale =1./255)

train_data = datagen . flow_from_directory (
data_dir ,
target_size =img_size ,
batch_size =batch_size ,
subset ='training ',
class_mode ='categorical '
)

val_data = datagen . flow_from_directory (
data_dir ,
target_size =img_size ,
batch_size =batch_size ,
subset ='validation ',
class_mode ='categorical '
)

# === Modèle CNN simple ===
model = models . Sequential ([
layers .Conv2D (32, (3, 3), activation ='relu ', input_shape =( img_size
[0], img_size [1], 3)),
layers . MaxPooling2D (2, 2),

layers .Conv2D (64, (3, 3), activation ='relu '),
layers . MaxPooling2D (2, 2),

layers .Conv2D (128 , (3, 3), activation ='relu '),
layers . MaxPooling2D (2, 2),

layers . Flatten (),
layers . Dropout (0.5) ,
layers .Dense (128 , activation ='relu '),
layers .Dense( train_data .num_classes , activation ='softmax ')
])

# === Compilation ===
model. compile ( optimizer ='adam ', loss='categorical_crossentropy ', metrics
=['accuracy '])

# === EarlyStopping ===
early_stop = callbacks . EarlyStopping ( monitor ='val_loss ', patience =5,
restore_best_weights =True)

# === Entraînement ===
history = model.fit(
train_data ,
validation_data =val_data ,
epochs =epochs ,
callbacks =[ early_stop ]
)

# === Sauvegarde ===
model.save('gesture_model_N1 .h5')
print("￿ Modèle sauvegardé sous gesture_model_N1 .h5")
